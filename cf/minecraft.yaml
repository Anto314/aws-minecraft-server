
AWSTemplateFormatVersion: "2010-09-09"
Description: A simple Minecraft Server Solution
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: Project
        Parameters: [Name,BucketName]
      - Label: Network
        Parameters: [CIDR,Az]
      - Label: Server
        Parameters: [BucketNameParameter, ServerInstanceType, Ami]
      - Label: Source Code
        Parameters: [Repository]
      - Label: CodeBuild
        Parameters: [ComputeType, Type, Image]
      - Label: Low Level Configuration

    ParameterLabels:
      CIDR:
        default: "Which is the CIDR for this Solution ?"
      Az:
        default: "On which Az the subnet with lay on ?"
      Name:
        default: "Name of the Solution"
      BucketName:
        default: "Name of the Bucket"
      BucketNameParameter:
        default: "Name of the SSM Parameter that the instance will read"
      ServerInstanceType:
        default: "Instance Type of Server"
      Ami:
        default: "AMI to use to run with Instance"
      Repository:
        default: Repository Url
Parameters:
  CIDR:
    Description: VPC Cidr
    Type: String
    Default: 10.24.0.0/28
  Az:
    Description: Subnet Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
    Default: eu-west-1a
  Name:
    Description: Stack Name
    Type: String
    Default: minecraft-server
  BucketName:
    Description: Bucket Name
    Type: String
    Default: s3-anto-minecraft-server
  BucketNameParameter:
    Description: SSM Parameter where the bucket Name will be stored
    Type: String
    Default: /infra/s3/bucketName
  ServerInstanceType:
    Description: Instance Type for the Server
    Type: String
    Default: t4g.medium
  Ami:
    Description: AMI to Use for the Server
    Type: String
    Default: ami-036559f6f83de21be
  Repository:
    Description: Repository Url
    Type: String
    Default: "https://github.com/Anto314/aws-minecraft-server.git"

  ComputeType: 
    Description: Codebuild Compute Size
    Type: String
    Default: BUILD_GENERAL1_SMALL
  Type: 
    Description: Type of Container to be run for Build
    Type: String
    Default: LINUX_CONTAINER 
  Image: 
    Description: Docker Image to be used by Codebuild
    Type: String
    Default: aws/codebuild/amazonlinux2-aarch64-standard:2.0

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub vpc-${Name}
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref Az
      VpcId: !Ref Vpc
      CidrBlock: !Ref CIDR
      Tags:
        - Key: Name
          Value: !Sub sbn-${Name}
  SubnetRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RoutingTable
      SubnetId: !Ref Subnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-anto-${Name}
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
      
  RoutingTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name 
          Value: !Sub rtb-anto-${Name}
      VpcId: !Ref Vpc

  InternetAccessRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref RoutingTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub sgec2-${Name}
      GroupDescription: Protect Minecraft Server Access
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Access to All AWS Services
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: Access to Udp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Access to HTTP Server

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref BucketName
      AccessControl: Private
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub role-${Name}
      Path: "/"
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub policy-s3-${Name}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:HeadObject
                    - s3:ListBucket
                  Resource: !Sub ${s3Bucket.Arn}*
                - Effect: "Allow"
                  Action:
                  - ssm:GetParameter
                  Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BucketNameParameter}

                - Effect: Allow
                  Action:
                    - ssmmessages:CreateControlChannel
                    - ssmmessages:CreateDataChannel
                    - ssmmessages:OpenControlChannel
                    - ssmmessages:OpenDataChannel
                  Resource: "*"

                - Effect: Allow
                  Action:
                    - s3:GetEncryptionConfiguration
                  Resource: "*"
                
                - Effect: Allow
                  Action: "sns:Publish"
                  Resource: !Ref SnsTopic

                - Effect: Allow
                  Action: "sns:ListTopics"
                  Resource: "*"

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ip-${Name}
      Path: /
      Roles:
        - !Ref IamRole
  S3ParameterName:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Ref BucketNameParameter
      Tier: Standard
      Type: String
      Value: !Ref BucketName
  SNSParameterName:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: /infra/sns/topicName
      Tier: Standard
      Type: String
      Value: !GetAtt SnsTopic.TopicName
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub sns-cf-anto-${Name} 
      TopicName: !Sub sns-cf-anto-${Name}
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub lt-anto-${Name}
      LaunchTemplateData:
        IamInstanceProfile: 
          Arn: !GetAtt IamInstanceProfile.Arn
        ImageId: !Ref Ami
        NetworkInterfaces:
          - AssociatePublicIpAddress: True
            DeviceIndex: 0
            Groups:
              - !Ref SG
        UserData:
          Fn::Base64: !Sub |
            #! /bin/bash
            yum install git gcc -y
            amazon-linux-extras install ansible2 -y
            yum install python-pip -y
            pip install botocore boto3
            ansible-galaxy collection install amazon.aws
            ansible-galaxy collection install community.aws
            aws s3 sync s3://${BucketName}/bin /tmp
            cd /tmp
            ansible-playbook playbook.yaml --extra-vars bucketName=${BucketName}


  Autoscalling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub asg-anto-${Name}
      AvailabilityZones: 
        - !Ref Az
      Cooldown: 5
      DesiredCapacity: 0
      HealthCheckGracePeriod: 30
      MaxSize: 1
      MinSize: 0
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateName: !Sub lt-anto-${Name}
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref ServerInstanceType
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
      Tags: 
        - Key: Name
          Value: !Sub ec2-anto-${Name}
          PropagateAtLaunch: True
      TerminationPolicies: 
        - OldestInstance
      VPCZoneIdentifier: 
        - !Ref Subnet

  CustomLifeCycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties: 
      AutoScalingGroupName: !Ref Autoscalling
      DefaultResult: CONTINUE
      LifecycleHookName: my-lifecycle
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      HeartbeatTimeout: 30

  SpotInstanceTerminaisonAutoscalling:
    Type: AWS::Events::Rule
    Properties:
      Description: Detection of Spot Instance Terminaison by ASG
      EventPattern: {
      "source": [
        "aws.autoscaling"
      ],
      "detail-type": [
        "EC2 Instance-terminate Lifecycle Action"
      ]
    }

  SpotInstanceTerminaisonEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: Detection of Spot Instance Terminaison
      EventPattern: {
        "source": 
          ["aws.ec2"],
          "detail-type": [
            "EC2 Spot Instance Interruption Warning"
            ]
      }