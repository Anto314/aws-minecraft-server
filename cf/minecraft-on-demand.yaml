
AWSTemplateFormatVersion: "2010-09-09"
Description: A simple Minecraft Server Solution
Parameters:
  CIDR:
    Description: VPC Cidr
    Type: String
    Default: 10.24.0.0/26
  ServerInstanceType:
    Description: Instance Type for the Server
    Type: String
    Default: t4g.medium
  Ami:
    Description: AMI to Use for the Server
    Type: String
    Default: ami-036559f6f83de21be

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::Region}-${AWS::StackName}
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      VpcId: !Ref Vpc
      CidrBlock: !Select [0, !Cidr [ !Ref CIDR, 4, 4 ]]
      Tags:
        - Key: Name
          Value: !Sub sbn-${AWS::Region}-${AWS::StackName}-a
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      VpcId: !Ref Vpc
      CidrBlock: !Select [1, !Cidr [ !Ref CIDR, 4, 4 ]]
      Tags:
        - Key: Name
          Value: !Sub sbn-${AWS::Region}-${AWS::StackName}-b
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}c
      VpcId: !Ref Vpc
      CidrBlock: !Select [2, !Cidr [ !Ref CIDR, 4, 4 ]]
      Tags:
        - Key: Name
          Value: !Sub sbn-${AWS::Region}-${AWS::StackName}-c

  SubnetRouteTableAttachmentA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RoutingTable
      SubnetId: !Ref SubnetA
  SubnetRouteTableAttachmentB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RoutingTable
      SubnetId: !Ref SubnetB
  SubnetRouteTableAttachmentC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RoutingTable
      SubnetId: !Ref SubnetC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-anto-${AWS::Region}-${AWS::StackName}
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
      
  RoutingTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name 
          Value: !Sub rtb-anto-${AWS::Region}-${AWS::StackName}
      VpcId: !Ref Vpc

  InternetAccessRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref RoutingTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub sgec2-${AWS::Region}-${AWS::StackName}
      GroupDescription: Protect Minecraft Server Access
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Access to All AWS Services
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: Access to Udp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Access to HTTP Server

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub s3-anto-${AWS::Region}-${AWS::StackName} 
      AccessControl: Private
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub role-${AWS::Region}-${AWS::StackName}
      Path: "/"
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub policy-s3-${AWS::Region}-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:HeadObject
                    - s3:ListBucket
                  Resource: !Sub ${s3Bucket.Arn}*
                - Effect: Allow
                  Action:
                    - ssmmessages:CreateControlChannel
                    - ssmmessages:CreateDataChannel
                    - ssmmessages:OpenControlChannel
                    - ssmmessages:OpenDataChannel
                  Resource: "*"

                - Effect: Allow
                  Action:
                    - s3:GetEncryptionConfiguration
                  Resource: "*"
                
                - Effect: Allow
                  Action: "sns:Publish"
                  Resource: !Ref SnsTopic

                - Effect: Allow
                  Action: "sns:ListTopics"
                  Resource: "*"

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ip-${AWS::Region}-${AWS::StackName}
      Path: /
      Roles:
        - !Ref IamRole
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub sns-cf-anto-${AWS::Region}-${AWS::StackName} 
      TopicName: !Sub sns-cf-anto--${AWS::Region}-${AWS::StackName}
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub lt-anto-${AWS::Region}-${AWS::StackName}
      LaunchTemplateData:
        CreditSpecification: 
          CpuCredits: standard
        IamInstanceProfile: 
          Arn: !GetAtt IamInstanceProfile.Arn
        ImageId: !Ref Ami
        InstanceType: !Ref ServerInstanceType
        NetworkInterfaces:
          - AssociatePublicIpAddress: True
            DeviceIndex: 0
            Groups:
              - !Ref SG
        UserData:
          Fn::Base64: !Sub |
            #! /bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo BEGIN
            date '+%Y-%m-%d %H:%M:%S'
            yum install git gcc -y
            yum install python3 -y
            pip3 install ansible
            pip3 install botocore boto3
            ansible-galaxy collection install amazon.aws
            ansible-galaxy collection install community.aws
            aws s3 sync s3://${s3Bucket}/bin /tmp
            cd /tmp
            sleep 2m
            export AWS_DEFAULT_REGION=${AWS::Region}
            ansible-playbook playbook.yaml --extra-vars bucketName=${s3Bucket} --extra-vars snsTopicArn=\"${SnsTopic}\"
            echo END


  Autoscalling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub asg-anto-${AWS::Region}-${AWS::StackName}
      AvailabilityZones: 
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}b
        - !Sub ${AWS::Region}c
      Cooldown: 5
      DesiredCapacity: 0
      HealthCheckGracePeriod: 30
      MaxSize: 1
      MinSize: 0
      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateName: !Sub lt-anto-${AWS::Region}-${AWS::StackName}
     
      Tags: 
        - Key: Name
          Value: !Sub ec2-anto-${AWS::Region}-${AWS::StackName}
          PropagateAtLaunch: True
      TerminationPolicies: 
        - OldestInstance
      VPCZoneIdentifier: 
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
